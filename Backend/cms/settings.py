"""
Django settings for cms project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import pytz
import json
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-z*kh6w4eu(_^da$(-esacb$w&lghnk+zp4-1(qc)w2*ht1a=te"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = ['https://cmsapi.suvidhaen.com','http://cmsapi.suvidhaen.com', 'https://cmsapi2.suvidhaen.com', 'http://cmsapi2.suvidhaen.com']



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'storages',
    'django_crontab',
    'corsheaders',
    'whitenoise.runserver_nostatic',
    'django_extensions',

    'user_onboarding',
    'station',
    'website',
    'task',
    'shift',
    'task_shift_occurrence',
    'ratings',
    'comment',
    'pax_deployed',
    'file_upload',
    'feedback',
    'inspection_feedback',
    'notified_task',
    'notified_data',
    'notified_users',
    'pdf',
    'static_data',
    'analytics',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'user_onboarding.middleware.AdminSuperuserMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'user_onboarding.logging_middleware.LoggingMiddleware',
]

ROOT_URLCONF = "cms.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR/"templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            'libraries':{
                'custom': 'website.custom',
            }
        },
    },
]

WSGI_APPLICATION = "cms.wsgi.application"
AUTH_USER_MODEL = 'user_onboarding.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=90),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=180),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

# configure your database setting in secretes.json
config = open('./secretes.json')
data = json.load(config)

EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

EMAIL_SENDER = data['GMAIL_LOCAL']['GMAIL_USER']
DOMAIN = 'swachhstations.suvidhaen.com'
APP_LINK = 'https://play.google.com/store/apps/details?id=com.suvidhaen.swachhstations'



if os.getenv('ENV') == 'PROD':
    DATABASES = data['DATABASES_PROD']
    EMAIL_HOST_USER = data['GMAIL_PROD']['GMAIL_USER']
    EMAIL_HOST_PASSWORD = data['GMAIL_PROD']['GMAIL_PASSWORD']
    AWS_ACCESS_KEY_ID = data["AWS_PROD"]["AWS_ACCESS_KEY_ID"]
    AWS_SECRET_ACCESS_KEY = data["AWS_PROD"]["AWS_SECRET_ACCESS_KEY"]
    AUTH = data["2FA_AUTH_PROD"]
    AWS_DEFAULT_ACL = None
    TWILIO_CREDENTIALS = data["TWILIO_PROD_SECONDARY"]
    AWS_STORAGE_BUCKET_NAME = data["AWS_PROD"]["AWS_STORAGE_BUCKET_NAME"]
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.ap-south-1.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
    # DEFAULT_FILE_STORAGE = 'cms.storage_backends.PublicMediaStorage'
    # FOr Static and Media files use staticfiles from collectstatic for production
    DEBUG = False
    STATIC_URL = 'staticfiles/'
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
    STATICFILES_DIRS = [
        BASE_DIR / "static",
    ]
    REQ_URL = 'https://cmsapi2.suvidhaen.com/'


elif os.getenv('ENV') == 'LOCAL':
    DATABASES = data['DATABASES_LOCAL']
    EMAIL_HOST_USER = data['GMAIL_LOCAL']['GMAIL_USER']
    EMAIL_HOST_PASSWORD = data['GMAIL_LOCAL']['GMAIL_PASSWORD']
    TWILIO_CREDENTIALS = data["TWILIO_LOCAL"]
    AUTH = data["2FA_AUTH_LOCAL"]
    # FOr Static and Media files use default files for local development
    DEBUG = True
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    STATIC_URL = 'staticfiles/'
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
    STATICFILES_DIRS = [
        BASE_DIR / "static",
    ]
    REQ_URL = 'http://localhost:8000/'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True
IST = pytz.timezone('Asia/Kolkata')


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SERVICE_ACCOUNT_KEY = data['DRIVE']['SERVICE_ACCOUNT_KEY']
FOLDER_ID = data['DRIVE']['FOLDER_ID']

CRONJOBS = [
    ('0 */3 * * *', 'django.core.management.call_command', ['delete_otp'])
]

CORS_ORIGIN_ALLOW_ALL = True
LOG_FILE = os.path.join(BASE_DIR, 'logs', 'logfile.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_FILE,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'INFO',
    },
}


GOOGLE_CLIENT_ID = data['GOOGLE']['GOOGLE_CLIENT_ID']
SOCIAL_SECRET = data['GOOGLE']['SOCIAL_SECRET']
